TARGET = SensDiag

#Defines
#------------------------------------------------------------------------------
#DEFINES = _FILE_OFFSET_BITS=64

#Inctruments
#------------------------------------------------------------------------------
CC = g++
LD = g++
RM = rm


#source dirs
#------------------------------------------------------------------------------
# SOURCEDIRS += dialogs

INCLUDES = .
# INCLUDES += $(SOURCEDIRS)

#Compiler's options
#------------------------------------------------------------------------------
CFLAGS += -g
CFLAGS += $(addprefix -D, $(DEFINES))
CFLAGS += $(addprefix -I, $(INCLUDES))
CFLAGS += -O2 
CFLAGS += -Wall 									# -Wall -w -Wextra -Werror
# CFLAGS += --std=c++11
#CFLAGS += -Wa,-adhlns=$@.lst  -fmessage-length=0 
CFLAGS += -libmpsse

LIBPATH = /usr/lib

#Linker's options
#------------------------------------------------------------------------------
LDFLAGS += -L.
LDFLAGS += -lmpsse
LDFLAGS += -lftdi


#List of object files
#------------------------------------------------------------------------------
OBJ += $(patsubst %.cpp, %.o, $(wildcard *.cpp))
OBJ += $(patsubst %.cpp, %.o, $(wildcard $(addsuffix /*.cpp, $(SOURCEDIRS))))
OBJ += $(patsubst %.c, %.o, $(wildcard *.c))

#------------------------------------------------------------------------------
VPATH := .

#List files for clean
#------------------------------------------------------------------------------
TOREMOVE += *.o *.d
TOREMOVE += $(TARGET)
TOREMOVE += $(addsuffix /*.o, $(SOURCEDIRS))
TOREMOVE += $(addsuffix /*.d, $(SOURCEDIRS))


all: $(TARGET)

clean:
	@$(RM) -f $(TOREMOVE)



#Linking
#------------------------------------------------------------------------------
$(TARGET): $(OBJ)
	$(LD)  -o $@  $^ $(LDFLAGS)  $(shell wx-config  --version=3.0 --libs --unicode=yes )   

#Compiling
#-----------------------------------------------------------------------------
%.o: %.cpp
	$(CC) $(CFLAGS)  $(shell wx-config --version=3.0 --cxxflags --unicode=yes  )   -MD -c $< -o $@

%.o: %.c
	$(CC) $(CFLAGS)  -c $< -o $@


.PHONY : all clean install


#-include $(OBJ: .o=.d)
include $(wildcard *.d)

# $@ - имя цели;
# $$@ - имя цели, если его необходимо ввести в строке описания зависимости справа от двоеточия;
# $< - имя первой зависомости;
# $? - имена всех зависимостей (с пробелами) которые новее, чем цель;
# $^ - имена всез зависимостей с пробелами;
# $* - имя текущего предусловия за вычетом суффикса;
# $% - имя соответствующего .о файла, если текущей целью является файл библиотеки;
# $** - только для nmake - внутри правила обозначаются все зависимости, оказавшиеся справа от двоеточия;
# D - часть имени внутренних макроопределений, описывающая директорию файла (допустимые варианты применения: $(@D), $$(@D)
# F - часть имени внутренних макоопределений, описывающая собственно имя файла (допустимые варианты прменения: $(@F), $$(@F)
# B - часть имени внутренних макроопределений, описывающая базовое имя файла (без диска, директориии и расширения);
# R - часть имени внутренних макроопределений, описывающая полный путь к файлу за вычетом расширения.
# 
# -o file   - поместить вывод в файл "file" (не зависимо от типа порождаемого файла, .exe, .о, .asm), имеет смысл если на входе больше одного файла.
# -c        - если используется эта опция, то линкер не запускается, и имена объектных файлов не должны использоваться в качестве параметров.
# -Wall     - печатать диагностические сообщения, которые сообщают о конструкциях не являющихся заведомо ошибочными, 
# но рискованных или, вероятно, содержащими ошибку.
# -s        - удаляет все символьные таблицы и информацию о перемещениях из исполняемого файла. Позволяет уменьшить размер программы.
# -Wl,опция - передает 'опцию' в качестве опции линкеру. Если 'опция' содержит запятые, она расщепляется запятыми на многочисленные опции.
# 
# 
# Получаение списка всех обьектных файлов необходимых для сборки
# 
# подразумевается что все исходные файлы .с находящиеся в дирректории с MakeFile учавствуют в сборке
# 
# $(patsubst %.c,%.o,$(wildcard *.c))
# 
# подробнее:
# 
# $(wildcard *.c) - получить список всех исходных файлов
# 
# patsubst - заменяет в списке полученом $(wildcard *.c) расширение .с на .о
# 
# Компиляция
# 
# all: $(patsubst %.c,%.o,$(wildcard *.c))
#     gcc $^ -o $@ 
# 
# %.o: %.c
#     gcc -c $<
# 
# подробнее:
# 
# gcc $^ -o $@
# 
# Во второй строке мы передаем компилятору все обьектные файлы $^ (имена всех зависимостей правила), затем ключ -o и имя цели в качестве имени для выходного обьектного файла.
# 
# Далее следует еще одна цель
# 
# %.o: %.c
#   gcc -c $<
# 
# Эта цель нужна для того, чтобы make знал как получить *.o из *.c файла, переменная $< содержит имя первой зависимости, т.е. наш исходный .c файл
# 
